# github PR 날리는 법 (원격으로 일하기)
## 시작
협업을 하기 위해서는 작업한 내용을 공유하는 방법이 필요하다. 이를 위해 기획자라면 메일을 주고 받거나 ms office365와 같은 클라우드 기반의 문서작성 도구를 이용할 수 있다. 또는 Confluence와 같은 협업 wiki 도구를 이용할 수도 있다. 

그럼 개발자들은 소스코드를 어떻게 관리할까? 개발자들은 효율적인 소스코드 관리를 위해 cvs, svn, git 등 다양한 소스 형상관리 도구를 개발해왔다. 그리고 현재는 대세는 git으로 이동하고 있다.

지난 15년간 `cvs` vs `svn` vs `git`의 검색량 추이를 보면 아래와 같다.
![cvs_svn_git](cvs_svn_git_1.png)

`git`이 압도적으로 많을 것이라 생각했는데, 의외로 `cvs`가 `git`과 비슷했다. 아무래도 이상해서 `cvs` 관련된 인기 검색어를 보니 내가 의도한 형상관리 도구인 `cvs(Concurrent Versions System)`가 아닌 편의점인 `cvs(convenience store)` 관련 검색어가 압도적으로 많아서 발생한 통계 오류였다.
![cvs_exclude](cvs_exclude.png)

그래서 `cvs`를 제외한 `svs` vs `git`의 양대 구도로 다시 검색어 추이를 비교해보니 아래와 같다.
![svn_git_1](svn_git_1.png)
2010년 이후로는 `git`이 압도적으로 우세이다.

`git`으로 협업을 시작하기 위해서는 `git clone $url`을 통해 remote repository의 소스를 local로 받고, 프로젝트의 소스코드 관리 규칙에 맞춰 개발을 하고, `git add -A`를 통해 스테이지에 올리고, `git commit -m $message`를 통해 커밋을 하고, 이를 `git push`를 통해 remote repository에 올리는 과정을 거쳐야 한다. 

거창하게 썼지만, 간단히 말하면 서버에서 소스를 다운로드받아서 협업 규칙에 따라 개발하고 이를 다시 서버에 업로드하여 공유한다는 것이다.

이 글에서는 `git`사용법이 아닌 `git`으로 협업하는 방법을 주로 다룰 것이다. 자세한 `git`의 사용법은 [git 사용법 (https://git-scm.com/docs)](https://git-scm.com/docs)을 참고하기 바란다. 시간이 없다면 [Roger Dudler 개발자가 작성한 간편 안내서 (https://rogerdudler.github.io/git-guide/index.ko.html)](https://rogerdudler.github.io/git-guide/index.ko.html)나 [github가 제공하는 cheat sheet(https://services.github.com/on-demand/downloads/github-git-cheat-sheet.pdf)](https://services.github.com/on-demand/downloads/github-git-cheat-sheet.pdf)도 좋은 대안이다.

## 의미
PR(Pull Request)은 직역하자면 Pull을 해달라는 요청이다.

Pull ? git 에서 다른 저장소의 소스를 당겨오는(pull) 액션

`git help pull`을 통해 본 pull의 동작은 `git-pull - Fetch from and integrate with another repository or a local branch`이다. 다른 리파지토리 또는 브랜치로부터 fetch & integrate 한다. 분리된 동작으로 보면 **`git-pull` = `git-fetch` + `git-merge`**가 된다.

`git help fetch`를 통해 본 fetch의 동작은 `git-fetch - Download objects and refs from another repository`이다. 다른 리파지토리로부터 객체나 레퍼런스를 다운로드 받는다. 쉽게 말하면 다른 리파지토리의 히스토리(변경사항)을 다운로드 받는 것이다.

`git help merge`를 통해 본 merge의 동작은 `git-merge - Join two or more development histories together`이다. 2개 이상의 개발 히스토리를 합치는 것이다.

**결과적으로 `git pull`의 동작은 다른 리파지토리 또는 브랜치로부터 변경사항을 다운로드 받고, 다운로드 받은 변경사항을 현재 브랜치에 합치는 작업을 하는 것이다.**

정확히 Pull Request는 git의 기능은 아니고, github, bitbucket, gitlab등의 git을 서비스하는 도구가 제공하는 기능이다. 그래서 github나 bitbucket의 경우는 Pull Request라고 부르고, gitlab의 경우는 Merge Request라고 부르기도 한다.

## 소스코드 관리
Pull Request를 사용할지 말지에 대해서 정하기 전에 소스코드 관리를 어떻게 할지에 대해서 먼저 정해야 한다. 소스코드 관리 정책이 정해져야 Pull Request가 왜 필요한지, 어떻게 써야할지를 알 수 있기 때문이다.

필자는 소스코드 관리 정책을 3가지 요소를 고려하여 4개 레벨로 분류한다.

- 요소
	- 개발조직의 크기
	- 개발자의 git 이해도
	- 조직의 개발 서버 환경

### level_1
가장 간략한 단계로 하나의 브랜치만 사용하는 전략이다. 보통 master만 사용한다.

- 장점 : 
	- git 이해도가 낮아도 쉽게 접근할 수 있다.
- 단점 : 
	- 소스코드가 관리 안될 수도 있다. 모든 개발자에게 master 브랜치에 접근 권한을 부여해야 하므로 의도하지 않은 소스코드가 master 브랜치를 혼란스럽게 할 수 있다.
	- 소스 히스토리가 보기 어렵다. (브랜치 그래프가 한줄로 표시되어 기능 로그 찾기가 어렵다.)

이 경우는 보통 개발조직의 크기가 작고, 개발자의 git 이해도가 낮을 경우에 채택한다. 

개발조직이 작기 때문에 커밋수가 적어 conflict가 발생할 가능성이 적다. 이 경우는 복잡한 workflow 보다는 간단하게 채택해볼 수 있다.

### level_2.1
level_1에서 한단계 진화한 것으로 3가지 브랜치(develop, release, master)를 사용한다.

- 장점 :
	- level_1 보다 소스코드 관리가 한결 깔끔해졌다. 브랜치별로 권한을 분리할 수 있으니 PO(Product Owner)가 master 브랜치에 merge되는 소스코드를 제어할 수 있다.
	- 배포될 서버별로 소스코드 버전을 분리할 수 있다.
- 단점 :
	- 개발하는 기능별로 소스코드 제어하기가 어렵다. develop에 모든 소스를 push하기 때문에 여러 기능이 동시에 개발될 경우 각 commit 별로 push 시기를 조절해야 하는데, 이게 말처럼 쉽지 않다.

이 경우는 보통 개발조직의 크기가 적정 수준이고, 개발서버 환경이 분리된 경우 채택한다.

개발조직이 적당하기 때문에 동시에 진행되는 기능개발이 많지 않고, 배포시기를 의사소통을 통해 조절할 수 있을 때 채택해 볼 수 있다.

### level_2.2
level_1에서 한단계 진화한 것으로 1+n개 브랜치(master + @)를 사용한다.

master를 언제나 배포가능한 clean 상태로 유지하며 모든 개발은 이외의 브랜치에서 진행하고, 이를 검수를 통해 master로 merge하는 전략이다. 이를 [github-flow](https://guides.github.com/introduction/flow/)라고 부른다.

- 장점 : 
	- level_1 에서 히스토리가 한줄로 나오던 것을 병합(rebase)해서 관리할 수 있다.
	- master에 대한 권한은 제어가 가능하기 때문에 PO가 소스코드를 어느정도 관리할 수 있다.
	- 배포는 master에서만 나가고 개발은 이외의 브랜치에서 관리되므로 기능개발을 동시에 진행하여도 제어할 수 있다.
- 단점 : 
	- 배포소스가 하나이니 dev/qa/stg/prd와 같이 분리된 서버환경으로 배포소스를 다르게 구성해가며 검증하기 불편하다.

이 경우는 개발자 수가 적정 수준이고, 굳이 서버환경별로 소스코드를 세분화하지 않아도 될 경우에 채택할 수 있다.

### level_3
level_2에서 한단계 진화한 것으로 5가지 브랜치(develop, feature, release, hotfix, master)를 사용한다.

기업에서는 이 전략을 채택하려고 노력하며, 이렇게 관리하는 것을 보통 git-flow라고 많이 부른다. (git-flow는 Vincent Driessen가 고안한 소스코드 관리 방안이다. https://nvie.com/posts/a-successful-git-branching-model/)

- 장점 :
	- 브랜치를 세분화한 만큼 소스코드에 대한 권한관리도 세분화하여 관리가 가능하다.
	- 동시에 여러가지 기능 개발이 수월하다. 서버에 반영되는 브랜치와 개발이 진행되는 브랜치를 분리하기 때문이다.
	- 서버에 반영될 소스코드에 대해서만 권한을 제어하기 때문에 각 기능이 배포될 시기를 조절하기가 좋다.
	- 기능별로 브랜치가 분리되기 때문에 기능별로 개발배포 환경을 분리할 수 있다.
- 단점 :
	- 절차가 많아진 만큼 git에 대한 높은 이해도가 요구된다.
	- git 이해도가 따라오지 않으면 대혼란을 야기할 수 있다.

