# github PR 날리는 법 (원격으로 일하기)
## 시작하기
협업을 하기 위해서는 작업한 내용을 공유하는 방법이 필요하다. 이를 위해 기획자라면 메일을 주고 받거나 ms office365와 같은 클라우드 기반의 문서작성 도구를 이용할 수 있다. 또는 Confluence와 같은 협업 wiki 도구를 이용할 수도 있다. 

그럼 개발자들은 소스코드를 어떻게 관리할까? 개발자들은 효율적인 소스코드 관리를 위해 cvs, svn, git 등 다양한 소스 형상관리 도구를 개발해왔다. 그리고 현재 대세는 git으로 이동하고 있다.

지난 15년간 `cvs` vs `svn` vs `git`의 검색량 추이를 보면 아래와 같다.
![cvs_svn_git](cvs_svn_git_1.png)

`git`이 압도적으로 많을 것이라 생각했는데, 의외로 `cvs`가 `git`과 비슷했다. 아무래도 이상해서 `cvs` 관련된 인기 검색어를 보니 내가 의도한 형상관리 도구인 `cvs(Concurrent Versions System)`가 아닌 편의점인 `cvs(convenience store)` 관련 검색어가 압도적으로 많아서 발생한 통계 오류였다.
![cvs_exclude](cvs_exclude.png)

그래서 `cvs`를 제외한 `svs` vs `git`의 양대 구도로 다시 검색어 추이를 비교해보니 아래와 같다.
![svn_git_1](svn_git_1.png)
2010년 이후로는 `git`이 압도적으로 우세이다.

`git`으로 협업을 시작하기 위해서는 `git clone $url`을 통해 remote repository의 소스를 local로 받고, 프로젝트의 소스코드 관리 규칙에 맞춰 개발을 하고, `git add -A`를 통해 스테이지에 올리고, `git commit -m $message`를 통해 커밋을 하고, 이를 `git push`를 통해 remote repository에 올리는 과정을 거쳐야 한다. 

거창하게 썼지만, 간단히 말하면 서버에서 소스를 다운로드받아서 협업 규칙에 따라 개발하고 이를 다시 서버에 업로드하여 공유한다는 것이다.

이 글에서는 `git`사용법이 아닌 `git`으로 협업하는 방법을 주로 다룰 것이다. 자세한 `git`의 사용법은 [git 사용법 (https://git-scm.com/docs)](https://git-scm.com/docs)을 참고하기 바란다. 시간이 없다면 [Roger Dudler 개발자가 작성한 간편 안내서 (https://rogerdudler.github.io/git-guide/index.ko.html)](https://rogerdudler.github.io/git-guide/index.ko.html)나 [github가 제공하는 cheat sheet(https://services.github.com/on-demand/downloads/github-git-cheat-sheet.pdf)](https://services.github.com/on-demand/downloads/github-git-cheat-sheet.pdf)도 좋은 대안이다.

## PR(PullRequest) 의미
PR(Pull Request)은 직역하자면 Pull을 해달라는 요청이다.

Pull ? git 에서 다른 저장소의 소스를 당겨오는(pull) 액션

`git help pull`을 통해 본 pull의 동작은 `git-pull - Fetch from and integrate with another repository or a local branch`이다. 다른 리파지토리 또는 브랜치로부터 fetch & integrate 한다. 분리된 동작으로 보면 **`git-pull` = `git-fetch` + `git-merge`**가 된다.

`git help fetch`를 통해 본 fetch의 동작은 `git-fetch - Download objects and refs from another repository`이다. 다른 리파지토리로부터 객체나 레퍼런스를 다운로드 받는다. 쉽게 말하면 다른 리파지토리의 히스토리(변경사항)을 다운로드 받는 것이다.

`git help merge`를 통해 본 merge의 동작은 `git-merge - Join two or more development histories together`이다. 2개 이상의 개발 히스토리를 합치는 것이다.

**결과적으로 `git pull`의 동작은 다른 리파지토리 또는 브랜치로부터 변경사항을 다운로드 받고, 다운로드 받은 변경사항을 현재 브랜치에 합치는 작업을 하는 것이다.**

정확히 Pull Request는 git의 기능은 아니고, github, bitbucket, gitlab등의 git을 서비스하는 도구가 제공하는 기능이다. 그래서 github나 bitbucket의 경우는 Pull Request라고 부르고, gitlab의 경우는 Merge Request라고 부르기도 한다.

## 소스코드 관리
Pull Request를 사용할지 말지에 대해서 정하기 전에 소스코드 관리를 어떻게 할지에 대해서 먼저 정해야 한다. 소스코드 관리 정책이 정해져야 Pull Request가 왜 필요한지, 어떻게 써야할지를 알 수 있기 때문이다.

필자는 소스코드 관리 정책을 정할 때 3가지 요소를 고려하여 4개 레벨로 분류한다.

- 요소
	- 개발조직의 크기
	- 개발자의 git 이해도
	- 조직의 개발 서버 환경

### level_1
가장 간략한 단계로 하나의 브랜치만 사용하는 전략이다. 보통 master만 사용한다.
![git_level_1](git_level_1.png)

- 장점 : 
	- git 이해도가 낮아도 쉽게 접근할 수 있다.
- 단점 : 
	- 소스코드가 관리 안될 수도 있다. 모든 개발자에게 master 브랜치에 접근 권한을 부여해야 하므로 의도하지 않은 소스코드가 master 브랜치를 혼란스럽게 할 수 있다.
	- 소스 히스토리가 보기 어렵다. (브랜치 그래프가 한줄로 표시되어 기능 로그 찾기가 어렵다.)

이 경우는 보통 개발조직의 크기가 작고, 개발자의 git 이해도가 낮을 경우에 채택한다. 

개발조직이 작기 때문에 커밋수가 적어 conflict가 발생할 가능성이 적다. 이 경우는 복잡한 workflow 보다는 간단하게 채택해볼 수 있다.

### level_2.1
level_1에서 한단계 진화한 것으로 3가지 브랜치(develop, release, master)를 사용한다.
![git_level_2_1](git_level_2_1.png)

- 장점 :
	- level_1 보다 소스코드 관리가 한결 깔끔해졌다. 브랜치별로 권한을 분리할 수 있으니 PO(Product Owner)가 master 브랜치에 merge되는 소스코드를 제어할 수 있다.
	- 배포될 서버별로 소스코드 버전을 분리할 수 있다.
- 단점 :
	- 개발하는 기능별로 소스코드 제어하기가 어렵다. develop에 모든 소스를 push하기 때문에 여러 기능이 동시에 개발될 경우 각 commit 별로 push 시기를 조절해야 하는데, 이게 말처럼 쉽지 않다.

이 경우는 보통 개발조직의 크기가 적정 수준이고, 개발서버 환경이 분리된 경우 채택한다.

개발조직이 적당하기 때문에 동시에 진행되는 기능개발이 많지 않고, 배포시기를 의사소통을 통해 조절할 수 있을 때 채택해 볼 수 있다.

### level_2.2
level_1에서 한단계 진화한 것으로 1+n개 브랜치(master + @)를 사용한다.

master를 언제나 배포가능한 clean 상태로 유지하며 모든 개발은 이외의 브랜치에서 진행하고, 이를 검수를 통해 master로 merge하는 전략이다. 이를 [github-flow](https://guides.github.com/introduction/flow/)라고 부른다.
![git_level_2_2](git_level_2_2.png)
[그림 출처 : https://guides.github.com/introduction/flow/]

- 장점 : 
	- level_1 에서 히스토리가 한줄로 나오던 것을 병합(rebase)해서 관리할 수 있다.
	- master에 대한 권한은 제어가 가능하기 때문에 PO가 소스코드를 어느정도 관리할 수 있다.
	- 배포는 master에서만 나가고 개발은 이외의 브랜치에서 관리되므로 기능개발을 동시에 진행하여도 제어할 수 있다.
- 단점 : 
	- 배포소스가 하나이니 dev/qa/stg/prd와 같이 분리된 서버환경으로 배포소스를 다르게 구성해가며 검증하기 불편하다.

이 경우는 개발자 수가 적정 수준이고, 굳이 서버환경별로 소스코드를 세분화하지 않아도 될 경우에 채택할 수 있다.

### level_3
level_2에서 한단계 진화한 것으로 5가지 브랜치(develop, feature, release, hotfix, master)를 사용한다.

기업에서는 이 전략을 채택하려고 노력하며, 이렇게 관리하는 것을 보통 git-flow라고 많이 부른다. (git-flow는 Vincent Driessen가 고안한 소스코드 관리 방안이다. https://nvie.com/posts/a-successful-git-branching-model/)
![git_level_3](git_level_3.png)

- 장점 :
	- 브랜치를 세분화한 만큼 소스코드에 대한 권한관리도 세분화하여 관리가 가능하다.
	- 동시에 여러가지 기능 개발이 수월하다. 서버에 반영되는 브랜치와 개발이 진행되는 브랜치를 분리하기 때문이다.
	- 서버에 반영될 소스코드에 대해서만 권한을 제어하기 때문에 각 기능이 배포될 시기를 조절하기가 좋다.
	- 기능별로 브랜치가 분리되기 때문에 기능별로 개발배포 환경을 분리할 수 있다.
- 단점 :
	- 절차가 많아진 만큼 git에 대한 높은 이해도가 요구된다.
	- git 이해도가 따라오지 않으면 대혼란을 야기할 수 있다.

## PR이 필요한 이유
그렇다면 PR이 왜 필요한지 생각해보자. Pull Request는 의미 그대로 "나의 코드를 fetch해서 메인 브랜치에 merge 해달라."는 것이다. 숨은 의미를 생각해보면 "나의 코드를 fetch해서 **코드/로직을 확인해보고** 적용해도 된다면 메인 브랜치에 merge 해달라."는 것이다. 여기서 나는 메인 브랜치에 push 권한이 있을 수도 있고 없을 수도 있다. 정책상 엄격하게 권한을 제한하여 PR을 강제할 수도 있고 아닐 수도 있다. 다만 여기서 중요한 것은 협업 프로세스에 의해 메인브랜치에 merge하기 전에 동료들과 코드 검토를 하기 위해 PR을 날리는 것이다. 즉 PR은 동료들과 코드리뷰를 하기 위해 사용하는 하나의 도구인 것이다.

## github PR 날리는 방법

### branch 생성
#### repository에 branch 생성 권한이 있는 경우
이 경우는 보통 해당 프로젝트에 collaborator로 포함된 경우이다. 이때는 메인브랜치에서 기능개발에 사용할 feature 브랜치를 생성한다. 2가지 방법이 있다. 첫째로는 github 페이지에서 직접 remote 브랜치를 생성 후 로컬로 pull 받을 수 있고, 둘째로는 로컬 브랜치에서 생성 후 remote로 push할 수 있다.

- 첫번째 방법 : github 페이지에서 직접 remote 브랜치 생성. 브랜치 생성 후 로컬 리파지토리로 pull 받아야 한다.
![git_create_branch_1](git_create_branch_1.png)
- 두번째 방법 : 로컬 리파지토리에서 브랜치 생성 후 remote로 push하는 방법.
![git_create_branch_2](git_create_branch_2.png)

#### repository에 branch 생성 권한이 없는 경우
이 경우는 보통 오픈소스 프로젝트에 참여하고 싶은 경우에 해당한다. 이때는 github의 리파지토리를 본인 계정의 리파지토리로 fork한 후 본인 계정 리파지토리에서 작업을 진행하면 된다.

- github 리파지토리 우측 상단에 'fork' 클릭
![git_fork_1](git_fork_1.png)
- fork할 리파지토리가 생성될 계정 선택
![git_fork_2](git_fork_2.png)

### PR생성
개발을 완료한 후 수정사항을 remote 브랜치에 push한 후 PR을 통해 메인브랜치로 merge 요청을 보낼 수 있다.

- remote로 push
![git_push_1](git_push_1.png)
- github에서 pull request 생성
![github_PR_1](github_PR_1.png)
![github_PR_2](github_PR_2.png)

### PR 코드 사이즈와 코드 리뷰
PR 코드 사이즈와 코드리뷰 방법은 케바케이다. 프로젝트가 운영모드가 되어 기능개발 보다는 버그수정에 집중된 경우 수정된 코드량이 적어서 PR보내는 코드 사이즈도 적을 것이다. 반대로 프로젝트가 한창 기능개발을 하는 경우 수시로 대량의 코드가 커밋되어 PR 코드 사이즈도 크고 PR 수도 많을 것이다. 그래서 정답은 없고 프로젝트 상황과 조직 문화에 따라 동료들과 협의된 대로 진행하면 된다. 다만, 어느정도 선호되는 방법은 있다.

'smartbear'라는 apm개발 업체에서는 cisco system 개발자들을 대상으로 연구를 통해 아래와 같은 10가지 코드리뷰 원칙을 세웠고, 상당 부분 수용하기에 거부감이 없는 항목들이다.

[참고 : https://smartbear.com/learn/code-review/best-practices-for-peer-code-review/]

1. 한번에 400줄 이하의 코드를 리뷰해라. 60~90분 간 200~400 줄의 코드를 검토하면 약 70~90%의 결함을 잡을 수 있다.
2. 코드작성자가 직접 시간을 투자해서 리뷰해라. 리뷰속도는 1시간에 500줄 이하의 코드가 좋다.
3. 한번에 1시간 이상 리뷰하지 말아라. 너무 빨리 코드리뷰하면 안되듯 한번에 너무 많은 양을 리뷰해도 좋지 않다. 1시간이 지나면 집중력이 떨어진다.
4. 측정 가능한 목표를 세워라. 목표에 따라 리뷰 방향이 달라진다.
5. 코드 작성자는 리뷰 전에 주석을 작성해라. 주석은 리뷰 동안 동료들의 이해를 도우며, 추가로 주석을 작성하는 동안 작성자 스스로 결함을 발견하기도 한다.
6. 체크리스트를 사용해라. 대부분의 개발자가 반복하는 실수를 체크리스트로 잡을 수 있다. 특히 누락되는 코드는 검토가 되지 않으므로 체크리스트가 효과적이다.
7. 발견한 결함을 수정하는 프로세스를 세워라. 검토자가 버그를 기록하고 개발자와 토론하고 승인하는 프로세스 도구를 사용하는 것이 좋다.
8. 긍정적인 코드리뷰 문화를 만들어라. 코드리뷰는 코드품질을 높이는 용도로만 사용되어져야 한다. 리뷰 결과가 개인의 성과로 쓰여진다면 개발자는 방어적인 태도를 취하게된다.
9. 동료들이 리뷰할 것이라는 잠재적인 생각을 가져라. 동료가 반드시 볼 것이라는 생각을 하면 개발자는 무의식적으로 클린코드를 작성하게 된다.
10. 가벼운 코드리뷰를 해라. 가벼운 코드리뷰는 무거운 코드리뷰의 20% 시간을 사용하지만, 많은 버그를 찾게 한다. 무거운 코드리뷰는 보통 코드 200줄에 9시간 리뷰를 하는 것이다.